buildscript {
    if(aspectsEnabled.toBoolean()) {
        configurations {
            ajc
            aspects
            aspectCompile
            compile {
                extendsFrom aspects
            }
        }
    }
}

plugins {
    id 'java-library'
    id 'io.freefair.aspectj' version '5.3.3.3' apply false
}
if (aspectsEnabled.toBoolean()) {
    apply plugin: 'io.freefair.aspectj'
    aspectj {
        version = "1.9.6"
    }
}

java {
    //1_8 necessary for jetbrain annotation and unit tests!
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation group: 'org.jetbrains', name: 'annotations', version: '21.0.1'

    //for unit tests
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    //For reasons only God knows, this prevents UnitTests imports to stay valid when using aspectj!!
    implementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'

    if(aspectsEnabled.toBoolean()) {
        //Dependencies required for aspect compilation
        ajc "org.aspectj:aspectjtools:1.9.6"
        // Without this library the caller can't use aspects
        implementation group: 'org.aspectj', name: 'aspectjrt', version: '1.9.6'
        testImplementation group: 'org.aspectj', name: 'aspectjrt', version: '1.9.6'
        api group: 'org.aspectj', name: 'aspectjrt', version: '1.9.6'
    }
}

if (aspectsEnabled.toBoolean()) {
    // Source-Set definitions required to make aspectj compile time weaving work in our context
    if (testWhenBuilding.toBoolean()) {
        sourceSets.main.aspectj.srcDirs = files(['src/main/java', 'src/test/java'])
    }
    else {
        sourceSets.main.aspectj.srcDirs = files(['src/main/java'])
    }
    // needed if we use ajc (which is here the case) in order to have unit tests compiled
    sourceSets.test.aspectj.srcDirs = files(['src/test/java'])

    compileAspectj {
        println "destinationDirectory.get() ="+destinationDirectory.get()+" --- "+destinationDirectory.get().getClass().getSimpleName()
        destinationDirectory.set(new File("build\\classes\\java\\main"))
        println "destinationDirectory ="+destinationDirectory.get()
    }
    compileTestAspectj {
        println "destinationDirectory.get() ="+destinationDirectory.get()+" --- "+destinationDirectory.get().getClass().getSimpleName()
        destinationDirectory.set(new File("build\\classes\\java\\test"))
        println "destinationDirectory ="+destinationDirectory.get()
        ajcOptions {
        }
    }
}

//to avoid 'duplicate class' error
jar { duplicatesStrategy(DuplicatesStrategy.INCLUDE)}

test {
    outputs.upToDateWhen {false}
    // enable TestNG support (default is JUnit)
    useTestNG()
    // enable JUnit Platform (a.k.a. JUnit 5) support
    useJUnitPlatform()
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat "full"

    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED', 'STANDARD_OUT'
        stackTraceFilters = []
    }
}

//This configuration for the jar task ensures that junit-test are performed while trying to create the jar library!
if (testWhenBuilding.toBoolean()) {

    jar.configure {
        dependsOn('test')
    }
}